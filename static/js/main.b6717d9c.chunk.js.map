{"version":3,"sources":["components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/ContactItem/ContactItem.module.css","components/Container/Container.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","s","container","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","target","value","reset","getContactsNames","reduce","allNames","push","onSubmit","event","preventDefault","alert","contactsActions","form","label","type","input","onChange","autoComplete","button","disabled","Filter","ContactItem","btnDelete","onClick","ContactList","map","contactItem","App","itemsReducer","createReducer","filterReducer","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b6717d9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1k-AB\",\"input\":\"Filter_input__2fOte\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__20E9L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__1UyXb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactItem_btnDelete__1Py_l\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n    return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nexport const addContact = createAction('contacts/add', (name, number) => ({\n    payload: {\n        id: shortid.generate(),\n        name,\n        number,\n    },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/changeFilter');\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n    const contacts = getContacts(state);\n    const filter = getFilter(state);\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter),\n    );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n\n            case 'number':\n                setNumber(value);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const contactsNames = getContactsNames();\n        if (contactsNames.includes(name.toLowerCase())) {\n            alert(`${name} is already in contacts`);\n            return;\n        }\n\n        // 2-ой вариант поиска существующего имени\n        // if (\n        //     contacts.find(\n        //         contact => contact.name.toLowerCase() === name.toLowerCase(),\n        //     )\n        // ) {\n        //     alert(`${name} is already in contacts`);\n        //     return;\n        // }\n\n        dispatch(contactsActions.addContact(name, number));\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    const getContactsNames = () => {\n        return contacts.reduce((allNames, { name }) => {\n            allNames.push(name.toLowerCase());\n            return allNames;\n        }, []);\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label}>\n                Name\n                <input\n                    type=\"text\"\n                    className={s.input}\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <label className={s.label}>\n                Number\n                <input\n                    type=\"tel\"\n                    className={s.input}\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    autoComplete=\"off\"\n                />\n            </label>\n            <button\n                type=\"submit\"\n                className={s.button}\n                disabled={name === '' || number === ''}\n            >\n                Add contact\n            </button>\n        </form>\n    );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n    const value = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <label className={s.label}>\n            Find contacts by name\n            <input\n                type=\"text\"\n                className={s.input}\n                value={value}\n                onChange={event =>\n                    dispatch(contactsActions.changeFilter(event.target.value))\n                }\n                autoComplete=\"off\"\n            />\n        </label>\n    );\n};\n\nexport default Filter;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactItem.module.css';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\n\nconst ContactItem = ({ name, number, id }) => {\n    const dispatch = useDispatch();\n    return (\n        <>\n            {name}: {number}\n            <button\n                type=\"button\"\n                className={s.btnDelete}\n                onClick={() => dispatch(contactsActions.deleteContact(id))}\n            >\n                Delete\n            </button>\n        </>\n    );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport s from './ContactList.module.css';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport ContactItem from '../ContactItem';\n\nconst ContactList = () => {\n    const contacts = useSelector(getVisibleContacts);\n\n    return (\n        <ul>\n            {/* отображает отсутствие контаков */}\n            {/* {contacts.length === 0 && <p>No contacts</p>} */}\n\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.contactItem}>\n                    <ContactItem name={name} number={number} id={id} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default ContactList;\n","import Container from './components/Container';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => (\n    <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </Container>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as contactsActions from './contacts-actions';\n\nconst itemsReducer = createReducer([], {\n    [contactsActions.addContact]: (state, { payload }) => [payload, ...state],\n    [contactsActions.deleteContact]: (state, { payload }) =>\n        state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n    [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst contactsReducer = combineReducers({\n    items: itemsReducer,\n    filter: filterReducer,\n});\n\nexport default contactsReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst contactsPersistConfig = {\n    key: 'rootReducer',\n    storage,\n    blacklist: ['filter'],\n};\n\nconst middleware = [\n    ...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }),\n    logger,\n];\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer),\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n\n// пример state\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3JLzM\",\"label\":\"ContactForm_label__12j9y\",\"input\":\"ContactForm_input__2i-uz\",\"button\":\"ContactForm_button__3VxuM\"};"],"sourceRoot":""}